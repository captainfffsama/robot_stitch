// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kp2d.proto
#ifndef GRPC_kp2d_2eproto__INCLUDED
#define GRPC_kp2d_2eproto__INCLUDED

#include "kp2d.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace KP2D {

class Kp2d final {
 public:
  static constexpr char const* service_full_name() {
    return "KP2D.Kp2d";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status align(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::KP2D::AlignReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::AlignReply>> Asyncalign(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::AlignReply>>(AsyncalignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::AlignReply>> PrepareAsyncalign(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::AlignReply>>(PrepareAsyncalignRaw(context, request, cq));
    }
    virtual ::grpc::Status getEssentialMatrix(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::KP2D::GetEssentialMatrixReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetEssentialMatrixReply>> AsyncgetEssentialMatrix(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetEssentialMatrixReply>>(AsyncgetEssentialMatrixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetEssentialMatrixReply>> PrepareAsyncgetEssentialMatrix(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetEssentialMatrixReply>>(PrepareAsyncgetEssentialMatrixRaw(context, request, cq));
    }
    virtual ::grpc::Status getKPPosDescScore(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::KP2D::GetKPPosDescScoreReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetKPPosDescScoreReply>> AsyncgetKPPosDescScore(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetKPPosDescScoreReply>>(AsyncgetKPPosDescScoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetKPPosDescScoreReply>> PrepareAsyncgetKPPosDescScore(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetKPPosDescScoreReply>>(PrepareAsyncgetKPPosDescScoreRaw(context, request, cq));
    }
    virtual ::grpc::Status getKPPosDescScoreMap(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::KP2D::GetKPPosDescScoreMapReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetKPPosDescScoreMapReply>> AsyncgetKPPosDescScoreMap(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetKPPosDescScoreMapReply>>(AsyncgetKPPosDescScoreMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetKPPosDescScoreMapReply>> PrepareAsyncgetKPPosDescScoreMap(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetKPPosDescScoreMapReply>>(PrepareAsyncgetKPPosDescScoreMapRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void align(::grpc::ClientContext* context, const ::KP2D::ImagePair* request, ::KP2D::AlignReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void align(::grpc::ClientContext* context, const ::KP2D::ImagePair* request, ::KP2D::AlignReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void align(::grpc::ClientContext* context, const ::KP2D::ImagePair* request, ::KP2D::AlignReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getEssentialMatrix(::grpc::ClientContext* context, const ::KP2D::ImagePair* request, ::KP2D::GetEssentialMatrixReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getEssentialMatrix(::grpc::ClientContext* context, const ::KP2D::ImagePair* request, ::KP2D::GetEssentialMatrixReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getEssentialMatrix(::grpc::ClientContext* context, const ::KP2D::ImagePair* request, ::KP2D::GetEssentialMatrixReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getKPPosDescScore(::grpc::ClientContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getKPPosDescScore(::grpc::ClientContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getKPPosDescScore(::grpc::ClientContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getKPPosDescScoreMap(::grpc::ClientContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreMapReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getKPPosDescScoreMap(::grpc::ClientContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreMapReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getKPPosDescScoreMap(::grpc::ClientContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreMapReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::AlignReply>* AsyncalignRaw(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::AlignReply>* PrepareAsyncalignRaw(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetEssentialMatrixReply>* AsyncgetEssentialMatrixRaw(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetEssentialMatrixReply>* PrepareAsyncgetEssentialMatrixRaw(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetKPPosDescScoreReply>* AsyncgetKPPosDescScoreRaw(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetKPPosDescScoreReply>* PrepareAsyncgetKPPosDescScoreRaw(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetKPPosDescScoreMapReply>* AsyncgetKPPosDescScoreMapRaw(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::KP2D::GetKPPosDescScoreMapReply>* PrepareAsyncgetKPPosDescScoreMapRaw(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status align(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::KP2D::AlignReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::AlignReply>> Asyncalign(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::AlignReply>>(AsyncalignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::AlignReply>> PrepareAsyncalign(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::AlignReply>>(PrepareAsyncalignRaw(context, request, cq));
    }
    ::grpc::Status getEssentialMatrix(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::KP2D::GetEssentialMatrixReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::GetEssentialMatrixReply>> AsyncgetEssentialMatrix(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::GetEssentialMatrixReply>>(AsyncgetEssentialMatrixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::GetEssentialMatrixReply>> PrepareAsyncgetEssentialMatrix(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::GetEssentialMatrixReply>>(PrepareAsyncgetEssentialMatrixRaw(context, request, cq));
    }
    ::grpc::Status getKPPosDescScore(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::KP2D::GetKPPosDescScoreReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::GetKPPosDescScoreReply>> AsyncgetKPPosDescScore(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::GetKPPosDescScoreReply>>(AsyncgetKPPosDescScoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::GetKPPosDescScoreReply>> PrepareAsyncgetKPPosDescScore(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::GetKPPosDescScoreReply>>(PrepareAsyncgetKPPosDescScoreRaw(context, request, cq));
    }
    ::grpc::Status getKPPosDescScoreMap(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::KP2D::GetKPPosDescScoreMapReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::GetKPPosDescScoreMapReply>> AsyncgetKPPosDescScoreMap(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::GetKPPosDescScoreMapReply>>(AsyncgetKPPosDescScoreMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::GetKPPosDescScoreMapReply>> PrepareAsyncgetKPPosDescScoreMap(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::KP2D::GetKPPosDescScoreMapReply>>(PrepareAsyncgetKPPosDescScoreMapRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void align(::grpc::ClientContext* context, const ::KP2D::ImagePair* request, ::KP2D::AlignReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void align(::grpc::ClientContext* context, const ::KP2D::ImagePair* request, ::KP2D::AlignReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void align(::grpc::ClientContext* context, const ::KP2D::ImagePair* request, ::KP2D::AlignReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getEssentialMatrix(::grpc::ClientContext* context, const ::KP2D::ImagePair* request, ::KP2D::GetEssentialMatrixReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getEssentialMatrix(::grpc::ClientContext* context, const ::KP2D::ImagePair* request, ::KP2D::GetEssentialMatrixReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getEssentialMatrix(::grpc::ClientContext* context, const ::KP2D::ImagePair* request, ::KP2D::GetEssentialMatrixReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getKPPosDescScore(::grpc::ClientContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getKPPosDescScore(::grpc::ClientContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getKPPosDescScore(::grpc::ClientContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getKPPosDescScoreMap(::grpc::ClientContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreMapReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getKPPosDescScoreMap(::grpc::ClientContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreMapReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getKPPosDescScoreMap(::grpc::ClientContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreMapReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::KP2D::AlignReply>* AsyncalignRaw(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KP2D::AlignReply>* PrepareAsyncalignRaw(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KP2D::GetEssentialMatrixReply>* AsyncgetEssentialMatrixRaw(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KP2D::GetEssentialMatrixReply>* PrepareAsyncgetEssentialMatrixRaw(::grpc::ClientContext* context, const ::KP2D::ImagePair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KP2D::GetKPPosDescScoreReply>* AsyncgetKPPosDescScoreRaw(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KP2D::GetKPPosDescScoreReply>* PrepareAsyncgetKPPosDescScoreRaw(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KP2D::GetKPPosDescScoreMapReply>* AsyncgetKPPosDescScoreMapRaw(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::KP2D::GetKPPosDescScoreMapReply>* PrepareAsyncgetKPPosDescScoreMapRaw(::grpc::ClientContext* context, const ::KP2D::ImgAndThr& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_align_;
    const ::grpc::internal::RpcMethod rpcmethod_getEssentialMatrix_;
    const ::grpc::internal::RpcMethod rpcmethod_getKPPosDescScore_;
    const ::grpc::internal::RpcMethod rpcmethod_getKPPosDescScoreMap_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status align(::grpc::ServerContext* context, const ::KP2D::ImagePair* request, ::KP2D::AlignReply* response);
    virtual ::grpc::Status getEssentialMatrix(::grpc::ServerContext* context, const ::KP2D::ImagePair* request, ::KP2D::GetEssentialMatrixReply* response);
    virtual ::grpc::Status getKPPosDescScore(::grpc::ServerContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreReply* response);
    virtual ::grpc::Status getKPPosDescScoreMap(::grpc::ServerContext* context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreMapReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_align : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_align() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_align() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status align(::grpc::ServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::AlignReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestalign(::grpc::ServerContext* context, ::KP2D::ImagePair* request, ::grpc::ServerAsyncResponseWriter< ::KP2D::AlignReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getEssentialMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getEssentialMatrix() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getEssentialMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEssentialMatrix(::grpc::ServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::GetEssentialMatrixReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEssentialMatrix(::grpc::ServerContext* context, ::KP2D::ImagePair* request, ::grpc::ServerAsyncResponseWriter< ::KP2D::GetEssentialMatrixReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getKPPosDescScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getKPPosDescScore() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getKPPosDescScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKPPosDescScore(::grpc::ServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKPPosDescScore(::grpc::ServerContext* context, ::KP2D::ImgAndThr* request, ::grpc::ServerAsyncResponseWriter< ::KP2D::GetKPPosDescScoreReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getKPPosDescScoreMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getKPPosDescScoreMap() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getKPPosDescScoreMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKPPosDescScoreMap(::grpc::ServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreMapReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKPPosDescScoreMap(::grpc::ServerContext* context, ::KP2D::ImgAndThr* request, ::grpc::ServerAsyncResponseWriter< ::KP2D::GetKPPosDescScoreMapReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_align<WithAsyncMethod_getEssentialMatrix<WithAsyncMethod_getKPPosDescScore<WithAsyncMethod_getKPPosDescScoreMap<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_align : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_align() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::KP2D::ImagePair, ::KP2D::AlignReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::KP2D::ImagePair* request, ::KP2D::AlignReply* response) { return this->align(context, request, response); }));}
    void SetMessageAllocatorFor_align(
        ::grpc::experimental::MessageAllocator< ::KP2D::ImagePair, ::KP2D::AlignReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::KP2D::ImagePair, ::KP2D::AlignReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_align() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status align(::grpc::ServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::AlignReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* align(
      ::grpc::CallbackServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::AlignReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* align(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::AlignReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getEssentialMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getEssentialMatrix() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::KP2D::ImagePair, ::KP2D::GetEssentialMatrixReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::KP2D::ImagePair* request, ::KP2D::GetEssentialMatrixReply* response) { return this->getEssentialMatrix(context, request, response); }));}
    void SetMessageAllocatorFor_getEssentialMatrix(
        ::grpc::experimental::MessageAllocator< ::KP2D::ImagePair, ::KP2D::GetEssentialMatrixReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::KP2D::ImagePair, ::KP2D::GetEssentialMatrixReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getEssentialMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEssentialMatrix(::grpc::ServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::GetEssentialMatrixReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getEssentialMatrix(
      ::grpc::CallbackServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::GetEssentialMatrixReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getEssentialMatrix(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::GetEssentialMatrixReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getKPPosDescScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getKPPosDescScore() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::KP2D::ImgAndThr, ::KP2D::GetKPPosDescScoreReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreReply* response) { return this->getKPPosDescScore(context, request, response); }));}
    void SetMessageAllocatorFor_getKPPosDescScore(
        ::grpc::experimental::MessageAllocator< ::KP2D::ImgAndThr, ::KP2D::GetKPPosDescScoreReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::KP2D::ImgAndThr, ::KP2D::GetKPPosDescScoreReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getKPPosDescScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKPPosDescScore(::grpc::ServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getKPPosDescScore(
      ::grpc::CallbackServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getKPPosDescScore(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getKPPosDescScoreMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getKPPosDescScoreMap() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::KP2D::ImgAndThr, ::KP2D::GetKPPosDescScoreMapReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::KP2D::ImgAndThr* request, ::KP2D::GetKPPosDescScoreMapReply* response) { return this->getKPPosDescScoreMap(context, request, response); }));}
    void SetMessageAllocatorFor_getKPPosDescScoreMap(
        ::grpc::experimental::MessageAllocator< ::KP2D::ImgAndThr, ::KP2D::GetKPPosDescScoreMapReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::KP2D::ImgAndThr, ::KP2D::GetKPPosDescScoreMapReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getKPPosDescScoreMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKPPosDescScoreMap(::grpc::ServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreMapReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getKPPosDescScoreMap(
      ::grpc::CallbackServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreMapReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getKPPosDescScoreMap(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreMapReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_align<ExperimentalWithCallbackMethod_getEssentialMatrix<ExperimentalWithCallbackMethod_getKPPosDescScore<ExperimentalWithCallbackMethod_getKPPosDescScoreMap<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_align<ExperimentalWithCallbackMethod_getEssentialMatrix<ExperimentalWithCallbackMethod_getKPPosDescScore<ExperimentalWithCallbackMethod_getKPPosDescScoreMap<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_align : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_align() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_align() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status align(::grpc::ServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::AlignReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getEssentialMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getEssentialMatrix() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getEssentialMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEssentialMatrix(::grpc::ServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::GetEssentialMatrixReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getKPPosDescScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getKPPosDescScore() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getKPPosDescScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKPPosDescScore(::grpc::ServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getKPPosDescScoreMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getKPPosDescScoreMap() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getKPPosDescScoreMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKPPosDescScoreMap(::grpc::ServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreMapReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_align : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_align() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_align() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status align(::grpc::ServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::AlignReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestalign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getEssentialMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getEssentialMatrix() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getEssentialMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEssentialMatrix(::grpc::ServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::GetEssentialMatrixReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEssentialMatrix(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getKPPosDescScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getKPPosDescScore() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getKPPosDescScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKPPosDescScore(::grpc::ServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKPPosDescScore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getKPPosDescScoreMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getKPPosDescScoreMap() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getKPPosDescScoreMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKPPosDescScoreMap(::grpc::ServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreMapReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKPPosDescScoreMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_align : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_align() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->align(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_align() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status align(::grpc::ServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::AlignReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* align(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* align(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getEssentialMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getEssentialMatrix() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getEssentialMatrix(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getEssentialMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEssentialMatrix(::grpc::ServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::GetEssentialMatrixReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getEssentialMatrix(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getEssentialMatrix(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getKPPosDescScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getKPPosDescScore() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getKPPosDescScore(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getKPPosDescScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKPPosDescScore(::grpc::ServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getKPPosDescScore(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getKPPosDescScore(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getKPPosDescScoreMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getKPPosDescScoreMap() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getKPPosDescScoreMap(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getKPPosDescScoreMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKPPosDescScoreMap(::grpc::ServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreMapReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getKPPosDescScoreMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getKPPosDescScoreMap(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_align : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_align() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::KP2D::ImagePair, ::KP2D::AlignReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::KP2D::ImagePair, ::KP2D::AlignReply>* streamer) {
                       return this->Streamedalign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_align() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status align(::grpc::ServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::AlignReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedalign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::KP2D::ImagePair,::KP2D::AlignReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getEssentialMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getEssentialMatrix() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::KP2D::ImagePair, ::KP2D::GetEssentialMatrixReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::KP2D::ImagePair, ::KP2D::GetEssentialMatrixReply>* streamer) {
                       return this->StreamedgetEssentialMatrix(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getEssentialMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getEssentialMatrix(::grpc::ServerContext* /*context*/, const ::KP2D::ImagePair* /*request*/, ::KP2D::GetEssentialMatrixReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetEssentialMatrix(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::KP2D::ImagePair,::KP2D::GetEssentialMatrixReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getKPPosDescScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getKPPosDescScore() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::KP2D::ImgAndThr, ::KP2D::GetKPPosDescScoreReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::KP2D::ImgAndThr, ::KP2D::GetKPPosDescScoreReply>* streamer) {
                       return this->StreamedgetKPPosDescScore(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getKPPosDescScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getKPPosDescScore(::grpc::ServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetKPPosDescScore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::KP2D::ImgAndThr,::KP2D::GetKPPosDescScoreReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getKPPosDescScoreMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getKPPosDescScoreMap() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::KP2D::ImgAndThr, ::KP2D::GetKPPosDescScoreMapReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::KP2D::ImgAndThr, ::KP2D::GetKPPosDescScoreMapReply>* streamer) {
                       return this->StreamedgetKPPosDescScoreMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getKPPosDescScoreMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getKPPosDescScoreMap(::grpc::ServerContext* /*context*/, const ::KP2D::ImgAndThr* /*request*/, ::KP2D::GetKPPosDescScoreMapReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetKPPosDescScoreMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::KP2D::ImgAndThr,::KP2D::GetKPPosDescScoreMapReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_align<WithStreamedUnaryMethod_getEssentialMatrix<WithStreamedUnaryMethod_getKPPosDescScore<WithStreamedUnaryMethod_getKPPosDescScoreMap<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_align<WithStreamedUnaryMethod_getEssentialMatrix<WithStreamedUnaryMethod_getKPPosDescScore<WithStreamedUnaryMethod_getKPPosDescScoreMap<Service > > > > StreamedService;
};

}  // namespace KP2D


#endif  // GRPC_kp2d_2eproto__INCLUDED
