// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kp2d.proto

#include "kp2d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace KP2D {
constexpr Image::Image(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ImageDefaultTypeInternal {
  constexpr ImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageDefaultTypeInternal _Image_default_instance_;
constexpr ImgAndThr::ImgAndThr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : img_(nullptr)
  , threshold_(0){}
struct ImgAndThrDefaultTypeInternal {
  constexpr ImgAndThrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImgAndThrDefaultTypeInternal() {}
  union {
    ImgAndThr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImgAndThrDefaultTypeInternal _ImgAndThr_default_instance_;
constexpr ImagePair::ImagePair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imagea_(nullptr)
  , imageb_(nullptr){}
struct ImagePairDefaultTypeInternal {
  constexpr ImagePairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImagePairDefaultTypeInternal() {}
  union {
    ImagePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImagePairDefaultTypeInternal _ImagePair_default_instance_;
constexpr Tensor::Tensor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , _data_cached_byte_size_()
  , shape_()
  , _shape_cached_byte_size_(){}
struct TensorDefaultTypeInternal {
  constexpr TensorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TensorDefaultTypeInternal() {}
  union {
    Tensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TensorDefaultTypeInternal _Tensor_default_instance_;
constexpr AlignReply::AlignReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imga_roi_()
  , _imga_roi_cached_byte_size_()
  , imgb_roi_()
  , _imgb_roi_cached_byte_size_()
  , imga_same_(nullptr)
  , imgb_same_(nullptr)
  , status_(0){}
struct AlignReplyDefaultTypeInternal {
  constexpr AlignReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlignReplyDefaultTypeInternal() {}
  union {
    AlignReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlignReplyDefaultTypeInternal _AlignReply_default_instance_;
constexpr GetEssentialMatrixReply::GetEssentialMatrixReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matrix_(nullptr)
  , status_(0){}
struct GetEssentialMatrixReplyDefaultTypeInternal {
  constexpr GetEssentialMatrixReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEssentialMatrixReplyDefaultTypeInternal() {}
  union {
    GetEssentialMatrixReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEssentialMatrixReplyDefaultTypeInternal _GetEssentialMatrixReply_default_instance_;
constexpr GetKPPosDescScoreReply::GetKPPosDescScoreReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kp_(nullptr)
  , desc_(nullptr)
  , status_(0){}
struct GetKPPosDescScoreReplyDefaultTypeInternal {
  constexpr GetKPPosDescScoreReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetKPPosDescScoreReplyDefaultTypeInternal() {}
  union {
    GetKPPosDescScoreReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetKPPosDescScoreReplyDefaultTypeInternal _GetKPPosDescScoreReply_default_instance_;
constexpr GetKPPosDescScoreMapReply::GetKPPosDescScoreMapReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prob_(nullptr)
  , desc_(nullptr)
  , status_(0){}
struct GetKPPosDescScoreMapReplyDefaultTypeInternal {
  constexpr GetKPPosDescScoreMapReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetKPPosDescScoreMapReplyDefaultTypeInternal() {}
  union {
    GetKPPosDescScoreMapReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetKPPosDescScoreMapReplyDefaultTypeInternal _GetKPPosDescScoreMapReply_default_instance_;
}  // namespace KP2D
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kp2d_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kp2d_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kp2d_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kp2d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KP2D::Image, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KP2D::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KP2D::Image, image_),
  PROTOBUF_FIELD_OFFSET(::KP2D::Image, path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KP2D::ImgAndThr, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KP2D::ImgAndThr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KP2D::ImgAndThr, img_),
  PROTOBUF_FIELD_OFFSET(::KP2D::ImgAndThr, threshold_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KP2D::ImagePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KP2D::ImagePair, imagea_),
  PROTOBUF_FIELD_OFFSET(::KP2D::ImagePair, imageb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KP2D::Tensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KP2D::Tensor, data_),
  PROTOBUF_FIELD_OFFSET(::KP2D::Tensor, shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KP2D::AlignReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KP2D::AlignReply, imga_same_),
  PROTOBUF_FIELD_OFFSET(::KP2D::AlignReply, imgb_same_),
  PROTOBUF_FIELD_OFFSET(::KP2D::AlignReply, imga_roi_),
  PROTOBUF_FIELD_OFFSET(::KP2D::AlignReply, imgb_roi_),
  PROTOBUF_FIELD_OFFSET(::KP2D::AlignReply, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KP2D::GetEssentialMatrixReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KP2D::GetEssentialMatrixReply, matrix_),
  PROTOBUF_FIELD_OFFSET(::KP2D::GetEssentialMatrixReply, status_),
  PROTOBUF_FIELD_OFFSET(::KP2D::GetKPPosDescScoreReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KP2D::GetKPPosDescScoreReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KP2D::GetKPPosDescScoreReply, kp_),
  PROTOBUF_FIELD_OFFSET(::KP2D::GetKPPosDescScoreReply, desc_),
  PROTOBUF_FIELD_OFFSET(::KP2D::GetKPPosDescScoreReply, status_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KP2D::GetKPPosDescScoreMapReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KP2D::GetKPPosDescScoreMapReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KP2D::GetKPPosDescScoreMapReply, prob_),
  PROTOBUF_FIELD_OFFSET(::KP2D::GetKPPosDescScoreMapReply, desc_),
  PROTOBUF_FIELD_OFFSET(::KP2D::GetKPPosDescScoreMapReply, status_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::KP2D::Image)},
  { 9, 16, sizeof(::KP2D::ImgAndThr)},
  { 18, -1, sizeof(::KP2D::ImagePair)},
  { 25, -1, sizeof(::KP2D::Tensor)},
  { 32, -1, sizeof(::KP2D::AlignReply)},
  { 42, -1, sizeof(::KP2D::GetEssentialMatrixReply)},
  { 49, 57, sizeof(::KP2D::GetKPPosDescScoreReply)},
  { 60, 68, sizeof(::KP2D::GetKPPosDescScoreMapReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KP2D::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KP2D::_ImgAndThr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KP2D::_ImagePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KP2D::_Tensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KP2D::_AlignReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KP2D::_GetEssentialMatrixReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KP2D::_GetKPPosDescScoreReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KP2D::_GetKPPosDescScoreMapReply_default_instance_),
};

const char descriptor_table_protodef_kp2d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nkp2d.proto\022\004KP2D\"A\n\005Image\022\022\n\005image\030\001 \001"
  "(\014H\000\210\001\001\022\021\n\004path\030\002 \001(\tH\001\210\001\001B\010\n\006_imageB\007\n\005"
  "_path\"K\n\tImgAndThr\022\030\n\003img\030\001 \001(\0132\013.KP2D.I"
  "mage\022\026\n\tthreshold\030\002 \001(\002H\000\210\001\001B\014\n\n_thresho"
  "ld\"E\n\tImagePair\022\033\n\006imageA\030\001 \001(\0132\013.KP2D.I"
  "mage\022\033\n\006imageB\030\002 \001(\0132\013.KP2D.Image\"%\n\006Ten"
  "sor\022\014\n\004data\030\001 \003(\002\022\r\n\005shape\030\002 \003(\005\"\200\001\n\nAli"
  "gnReply\022\036\n\timgA_same\030\001 \001(\0132\013.KP2D.Image\022"
  "\036\n\timgB_same\030\002 \001(\0132\013.KP2D.Image\022\020\n\010imgA_"
  "roi\030\003 \003(\005\022\020\n\010imgB_roi\030\004 \003(\005\022\016\n\006status\030\005 "
  "\001(\005\"G\n\027GetEssentialMatrixReply\022\034\n\006matrix"
  "\030\001 \001(\0132\014.KP2D.Tensor\022\016\n\006status\030\002 \001(\005\"x\n\026"
  "GetKPPosDescScoreReply\022\035\n\002kp\030\001 \001(\0132\014.KP2"
  "D.TensorH\000\210\001\001\022\037\n\004desc\030\002 \001(\0132\014.KP2D.Tenso"
  "rH\001\210\001\001\022\016\n\006status\030\003 \001(\005B\005\n\003_kpB\007\n\005_desc\"\177"
  "\n\031GetKPPosDescScoreMapReply\022\037\n\004prob\030\001 \001("
  "\0132\014.KP2D.TensorH\000\210\001\001\022\037\n\004desc\030\002 \001(\0132\014.KP2"
  "D.TensorH\001\210\001\001\022\016\n\006status\030\003 \001(\005B\007\n\005_probB\007"
  "\n\005_desc2\216\002\n\004Kp2d\022,\n\005align\022\017.KP2D.ImagePa"
  "ir\032\020.KP2D.AlignReply\"\000\022F\n\022getEssentialMa"
  "trix\022\017.KP2D.ImagePair\032\035.KP2D.GetEssentia"
  "lMatrixReply\"\000\022D\n\021getKPPosDescScore\022\017.KP"
  "2D.ImgAndThr\032\034.KP2D.GetKPPosDescScoreRep"
  "ly\"\000\022J\n\024getKPPosDescScoreMap\022\017.KP2D.ImgA"
  "ndThr\032\037.KP2D.GetKPPosDescScoreMapReply\"\000"
  "b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kp2d_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kp2d_2eproto = {
  false, false, 1008, descriptor_table_protodef_kp2d_2eproto, "kp2d.proto", 
  &descriptor_table_kp2d_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_kp2d_2eproto::offsets,
  file_level_metadata_kp2d_2eproto, file_level_enum_descriptors_kp2d_2eproto, file_level_service_descriptors_kp2d_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_kp2d_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kp2d_2eproto);
  return descriptor_table_kp2d_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_kp2d_2eproto(&descriptor_table_kp2d_2eproto);
namespace KP2D {

// ===================================================================

class Image::_Internal {
 public:
  using HasBits = decltype(std::declval<Image>()._has_bits_);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KP2D.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:KP2D.Image)
}

void Image::SharedCtor() {
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:KP2D.Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:KP2D.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      image_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      path_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KP2D.Image.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KP2D.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (_internal_has_image()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_image(), target);
  }

  // string path = 2;
  if (_internal_has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KP2D.Image.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KP2D.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KP2D.Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // bytes image = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_image());
    }

    // string path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KP2D.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KP2D.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KP2D.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KP2D.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_image(from._internal_image());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_path(from._internal_path());
    }
  }
}

void Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KP2D.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KP2D.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImgAndThr::_Internal {
 public:
  using HasBits = decltype(std::declval<ImgAndThr>()._has_bits_);
  static const ::KP2D::Image& img(const ImgAndThr* msg);
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::KP2D::Image&
ImgAndThr::_Internal::img(const ImgAndThr* msg) {
  return *msg->img_;
}
ImgAndThr::ImgAndThr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KP2D.ImgAndThr)
}
ImgAndThr::ImgAndThr(const ImgAndThr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_img()) {
    img_ = new ::KP2D::Image(*from.img_);
  } else {
    img_ = nullptr;
  }
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:KP2D.ImgAndThr)
}

void ImgAndThr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&img_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&img_)) + sizeof(threshold_));
}

ImgAndThr::~ImgAndThr() {
  // @@protoc_insertion_point(destructor:KP2D.ImgAndThr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImgAndThr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete img_;
}

void ImgAndThr::ArenaDtor(void* object) {
  ImgAndThr* _this = reinterpret_cast< ImgAndThr* >(object);
  (void)_this;
}
void ImgAndThr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImgAndThr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImgAndThr::Clear() {
// @@protoc_insertion_point(message_clear_start:KP2D.ImgAndThr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && img_ != nullptr) {
    delete img_;
  }
  img_ = nullptr;
  threshold_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImgAndThr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .KP2D.Image img = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_img(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_threshold(&has_bits);
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImgAndThr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KP2D.ImgAndThr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KP2D.Image img = 1;
  if (this->has_img()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::img(this), target, stream);
  }

  // float threshold = 2;
  if (_internal_has_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KP2D.ImgAndThr)
  return target;
}

size_t ImgAndThr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KP2D.ImgAndThr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KP2D.Image img = 1;
  if (this->has_img()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *img_);
  }

  // float threshold = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImgAndThr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KP2D.ImgAndThr)
  GOOGLE_DCHECK_NE(&from, this);
  const ImgAndThr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImgAndThr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KP2D.ImgAndThr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KP2D.ImgAndThr)
    MergeFrom(*source);
  }
}

void ImgAndThr::MergeFrom(const ImgAndThr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KP2D.ImgAndThr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_img()) {
    _internal_mutable_img()->::KP2D::Image::MergeFrom(from._internal_img());
  }
  if (from._internal_has_threshold()) {
    _internal_set_threshold(from._internal_threshold());
  }
}

void ImgAndThr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KP2D.ImgAndThr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgAndThr::CopyFrom(const ImgAndThr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KP2D.ImgAndThr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgAndThr::IsInitialized() const {
  return true;
}

void ImgAndThr::InternalSwap(ImgAndThr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImgAndThr, threshold_)
      + sizeof(ImgAndThr::threshold_)
      - PROTOBUF_FIELD_OFFSET(ImgAndThr, img_)>(
          reinterpret_cast<char*>(&img_),
          reinterpret_cast<char*>(&other->img_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImgAndThr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImagePair::_Internal {
 public:
  static const ::KP2D::Image& imagea(const ImagePair* msg);
  static const ::KP2D::Image& imageb(const ImagePair* msg);
};

const ::KP2D::Image&
ImagePair::_Internal::imagea(const ImagePair* msg) {
  return *msg->imagea_;
}
const ::KP2D::Image&
ImagePair::_Internal::imageb(const ImagePair* msg) {
  return *msg->imageb_;
}
ImagePair::ImagePair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KP2D.ImagePair)
}
ImagePair::ImagePair(const ImagePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_imagea()) {
    imagea_ = new ::KP2D::Image(*from.imagea_);
  } else {
    imagea_ = nullptr;
  }
  if (from._internal_has_imageb()) {
    imageb_ = new ::KP2D::Image(*from.imageb_);
  } else {
    imageb_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KP2D.ImagePair)
}

void ImagePair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&imagea_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&imageb_) -
    reinterpret_cast<char*>(&imagea_)) + sizeof(imageb_));
}

ImagePair::~ImagePair() {
  // @@protoc_insertion_point(destructor:KP2D.ImagePair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImagePair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete imagea_;
  if (this != internal_default_instance()) delete imageb_;
}

void ImagePair::ArenaDtor(void* object) {
  ImagePair* _this = reinterpret_cast< ImagePair* >(object);
  (void)_this;
}
void ImagePair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImagePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImagePair::Clear() {
// @@protoc_insertion_point(message_clear_start:KP2D.ImagePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && imagea_ != nullptr) {
    delete imagea_;
  }
  imagea_ = nullptr;
  if (GetArena() == nullptr && imageb_ != nullptr) {
    delete imageb_;
  }
  imageb_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImagePair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .KP2D.Image imageA = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KP2D.Image imageB = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_imageb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImagePair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KP2D.ImagePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KP2D.Image imageA = 1;
  if (this->has_imagea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::imagea(this), target, stream);
  }

  // .KP2D.Image imageB = 2;
  if (this->has_imageb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::imageb(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KP2D.ImagePair)
  return target;
}

size_t ImagePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KP2D.ImagePair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KP2D.Image imageA = 1;
  if (this->has_imagea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imagea_);
  }

  // .KP2D.Image imageB = 2;
  if (this->has_imageb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imageb_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImagePair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KP2D.ImagePair)
  GOOGLE_DCHECK_NE(&from, this);
  const ImagePair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImagePair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KP2D.ImagePair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KP2D.ImagePair)
    MergeFrom(*source);
  }
}

void ImagePair::MergeFrom(const ImagePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KP2D.ImagePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imagea()) {
    _internal_mutable_imagea()->::KP2D::Image::MergeFrom(from._internal_imagea());
  }
  if (from.has_imageb()) {
    _internal_mutable_imageb()->::KP2D::Image::MergeFrom(from._internal_imageb());
  }
}

void ImagePair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KP2D.ImagePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImagePair::CopyFrom(const ImagePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KP2D.ImagePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagePair::IsInitialized() const {
  return true;
}

void ImagePair::InternalSwap(ImagePair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImagePair, imageb_)
      + sizeof(ImagePair::imageb_)
      - PROTOBUF_FIELD_OFFSET(ImagePair, imagea_)>(
          reinterpret_cast<char*>(&imagea_),
          reinterpret_cast<char*>(&other->imagea_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagePair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Tensor::_Internal {
 public:
};

Tensor::Tensor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena),
  shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KP2D.Tensor)
}
Tensor::Tensor(const Tensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KP2D.Tensor)
}

void Tensor::SharedCtor() {
}

Tensor::~Tensor() {
  // @@protoc_insertion_point(destructor:KP2D.Tensor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tensor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Tensor::ArenaDtor(void* object) {
  Tensor* _this = reinterpret_cast< Tensor* >(object);
  (void)_this;
}
void Tensor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:KP2D.Tensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  shape_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tensor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KP2D.Tensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  // repeated int32 shape = 2;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_shape(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KP2D.Tensor)
  return target;
}

size_t Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KP2D.Tensor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 shape = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KP2D.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Tensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KP2D.Tensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KP2D.Tensor)
    MergeFrom(*source);
  }
}

void Tensor::MergeFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KP2D.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  shape_.MergeFrom(from.shape_);
}

void Tensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KP2D.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tensor::CopyFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KP2D.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tensor::IsInitialized() const {
  return true;
}

void Tensor::InternalSwap(Tensor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  shape_.InternalSwap(&other->shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tensor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AlignReply::_Internal {
 public:
  static const ::KP2D::Image& imga_same(const AlignReply* msg);
  static const ::KP2D::Image& imgb_same(const AlignReply* msg);
};

const ::KP2D::Image&
AlignReply::_Internal::imga_same(const AlignReply* msg) {
  return *msg->imga_same_;
}
const ::KP2D::Image&
AlignReply::_Internal::imgb_same(const AlignReply* msg) {
  return *msg->imgb_same_;
}
AlignReply::AlignReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  imga_roi_(arena),
  imgb_roi_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KP2D.AlignReply)
}
AlignReply::AlignReply(const AlignReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      imga_roi_(from.imga_roi_),
      imgb_roi_(from.imgb_roi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_imga_same()) {
    imga_same_ = new ::KP2D::Image(*from.imga_same_);
  } else {
    imga_same_ = nullptr;
  }
  if (from._internal_has_imgb_same()) {
    imgb_same_ = new ::KP2D::Image(*from.imgb_same_);
  } else {
    imgb_same_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:KP2D.AlignReply)
}

void AlignReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&imga_same_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&imga_same_)) + sizeof(status_));
}

AlignReply::~AlignReply() {
  // @@protoc_insertion_point(destructor:KP2D.AlignReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlignReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete imga_same_;
  if (this != internal_default_instance()) delete imgb_same_;
}

void AlignReply::ArenaDtor(void* object) {
  AlignReply* _this = reinterpret_cast< AlignReply* >(object);
  (void)_this;
}
void AlignReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlignReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AlignReply::Clear() {
// @@protoc_insertion_point(message_clear_start:KP2D.AlignReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imga_roi_.Clear();
  imgb_roi_.Clear();
  if (GetArena() == nullptr && imga_same_ != nullptr) {
    delete imga_same_;
  }
  imga_same_ = nullptr;
  if (GetArena() == nullptr && imgb_same_ != nullptr) {
    delete imgb_same_;
  }
  imgb_same_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlignReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .KP2D.Image imgA_same = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_imga_same(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KP2D.Image imgB_same = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_imgb_same(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 imgA_roi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_imga_roi(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_imga_roi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 imgB_roi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_imgb_roi(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_imgb_roi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlignReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KP2D.AlignReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KP2D.Image imgA_same = 1;
  if (this->has_imga_same()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::imga_same(this), target, stream);
  }

  // .KP2D.Image imgB_same = 2;
  if (this->has_imgb_same()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::imgb_same(this), target, stream);
  }

  // repeated int32 imgA_roi = 3;
  {
    int byte_size = _imga_roi_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_imga_roi(), byte_size, target);
    }
  }

  // repeated int32 imgB_roi = 4;
  {
    int byte_size = _imgb_roi_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_imgb_roi(), byte_size, target);
    }
  }

  // int32 status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KP2D.AlignReply)
  return target;
}

size_t AlignReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KP2D.AlignReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 imgA_roi = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->imga_roi_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _imga_roi_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 imgB_roi = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->imgb_roi_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _imgb_roi_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .KP2D.Image imgA_same = 1;
  if (this->has_imga_same()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imga_same_);
  }

  // .KP2D.Image imgB_same = 2;
  if (this->has_imgb_same()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imgb_same_);
  }

  // int32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlignReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KP2D.AlignReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AlignReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlignReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KP2D.AlignReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KP2D.AlignReply)
    MergeFrom(*source);
  }
}

void AlignReply::MergeFrom(const AlignReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KP2D.AlignReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imga_roi_.MergeFrom(from.imga_roi_);
  imgb_roi_.MergeFrom(from.imgb_roi_);
  if (from.has_imga_same()) {
    _internal_mutable_imga_same()->::KP2D::Image::MergeFrom(from._internal_imga_same());
  }
  if (from.has_imgb_same()) {
    _internal_mutable_imgb_same()->::KP2D::Image::MergeFrom(from._internal_imgb_same());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void AlignReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KP2D.AlignReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlignReply::CopyFrom(const AlignReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KP2D.AlignReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlignReply::IsInitialized() const {
  return true;
}

void AlignReply::InternalSwap(AlignReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imga_roi_.InternalSwap(&other->imga_roi_);
  imgb_roi_.InternalSwap(&other->imgb_roi_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlignReply, status_)
      + sizeof(AlignReply::status_)
      - PROTOBUF_FIELD_OFFSET(AlignReply, imga_same_)>(
          reinterpret_cast<char*>(&imga_same_),
          reinterpret_cast<char*>(&other->imga_same_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlignReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetEssentialMatrixReply::_Internal {
 public:
  static const ::KP2D::Tensor& matrix(const GetEssentialMatrixReply* msg);
};

const ::KP2D::Tensor&
GetEssentialMatrixReply::_Internal::matrix(const GetEssentialMatrixReply* msg) {
  return *msg->matrix_;
}
GetEssentialMatrixReply::GetEssentialMatrixReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KP2D.GetEssentialMatrixReply)
}
GetEssentialMatrixReply::GetEssentialMatrixReply(const GetEssentialMatrixReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_matrix()) {
    matrix_ = new ::KP2D::Tensor(*from.matrix_);
  } else {
    matrix_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:KP2D.GetEssentialMatrixReply)
}

void GetEssentialMatrixReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&matrix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&matrix_)) + sizeof(status_));
}

GetEssentialMatrixReply::~GetEssentialMatrixReply() {
  // @@protoc_insertion_point(destructor:KP2D.GetEssentialMatrixReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetEssentialMatrixReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete matrix_;
}

void GetEssentialMatrixReply::ArenaDtor(void* object) {
  GetEssentialMatrixReply* _this = reinterpret_cast< GetEssentialMatrixReply* >(object);
  (void)_this;
}
void GetEssentialMatrixReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEssentialMatrixReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEssentialMatrixReply::Clear() {
// @@protoc_insertion_point(message_clear_start:KP2D.GetEssentialMatrixReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && matrix_ != nullptr) {
    delete matrix_;
  }
  matrix_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEssentialMatrixReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .KP2D.Tensor matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEssentialMatrixReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KP2D.GetEssentialMatrixReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KP2D.Tensor matrix = 1;
  if (this->has_matrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::matrix(this), target, stream);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KP2D.GetEssentialMatrixReply)
  return target;
}

size_t GetEssentialMatrixReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KP2D.GetEssentialMatrixReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KP2D.Tensor matrix = 1;
  if (this->has_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *matrix_);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEssentialMatrixReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KP2D.GetEssentialMatrixReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEssentialMatrixReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEssentialMatrixReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KP2D.GetEssentialMatrixReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KP2D.GetEssentialMatrixReply)
    MergeFrom(*source);
  }
}

void GetEssentialMatrixReply::MergeFrom(const GetEssentialMatrixReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KP2D.GetEssentialMatrixReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_matrix()) {
    _internal_mutable_matrix()->::KP2D::Tensor::MergeFrom(from._internal_matrix());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void GetEssentialMatrixReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KP2D.GetEssentialMatrixReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEssentialMatrixReply::CopyFrom(const GetEssentialMatrixReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KP2D.GetEssentialMatrixReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEssentialMatrixReply::IsInitialized() const {
  return true;
}

void GetEssentialMatrixReply::InternalSwap(GetEssentialMatrixReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetEssentialMatrixReply, status_)
      + sizeof(GetEssentialMatrixReply::status_)
      - PROTOBUF_FIELD_OFFSET(GetEssentialMatrixReply, matrix_)>(
          reinterpret_cast<char*>(&matrix_),
          reinterpret_cast<char*>(&other->matrix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEssentialMatrixReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetKPPosDescScoreReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetKPPosDescScoreReply>()._has_bits_);
  static const ::KP2D::Tensor& kp(const GetKPPosDescScoreReply* msg);
  static void set_has_kp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KP2D::Tensor& desc(const GetKPPosDescScoreReply* msg);
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::KP2D::Tensor&
GetKPPosDescScoreReply::_Internal::kp(const GetKPPosDescScoreReply* msg) {
  return *msg->kp_;
}
const ::KP2D::Tensor&
GetKPPosDescScoreReply::_Internal::desc(const GetKPPosDescScoreReply* msg) {
  return *msg->desc_;
}
GetKPPosDescScoreReply::GetKPPosDescScoreReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KP2D.GetKPPosDescScoreReply)
}
GetKPPosDescScoreReply::GetKPPosDescScoreReply(const GetKPPosDescScoreReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kp()) {
    kp_ = new ::KP2D::Tensor(*from.kp_);
  } else {
    kp_ = nullptr;
  }
  if (from._internal_has_desc()) {
    desc_ = new ::KP2D::Tensor(*from.desc_);
  } else {
    desc_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:KP2D.GetKPPosDescScoreReply)
}

void GetKPPosDescScoreReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&kp_)) + sizeof(status_));
}

GetKPPosDescScoreReply::~GetKPPosDescScoreReply() {
  // @@protoc_insertion_point(destructor:KP2D.GetKPPosDescScoreReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetKPPosDescScoreReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete kp_;
  if (this != internal_default_instance()) delete desc_;
}

void GetKPPosDescScoreReply::ArenaDtor(void* object) {
  GetKPPosDescScoreReply* _this = reinterpret_cast< GetKPPosDescScoreReply* >(object);
  (void)_this;
}
void GetKPPosDescScoreReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetKPPosDescScoreReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetKPPosDescScoreReply::Clear() {
// @@protoc_insertion_point(message_clear_start:KP2D.GetKPPosDescScoreReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      if (GetArena() == nullptr && kp_ != nullptr) {
        delete kp_;
      }
      kp_ = nullptr;
    }
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && desc_ != nullptr) {
        delete desc_;
      }
      desc_ = nullptr;
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetKPPosDescScoreReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .KP2D.Tensor kp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KP2D.Tensor desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_desc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetKPPosDescScoreReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KP2D.GetKPPosDescScoreReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KP2D.Tensor kp = 1;
  if (_internal_has_kp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kp(this), target, stream);
  }

  // .KP2D.Tensor desc = 2;
  if (_internal_has_desc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::desc(this), target, stream);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KP2D.GetKPPosDescScoreReply)
  return target;
}

size_t GetKPPosDescScoreReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KP2D.GetKPPosDescScoreReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .KP2D.Tensor kp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kp_);
    }

    // .KP2D.Tensor desc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *desc_);
    }

  }
  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetKPPosDescScoreReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KP2D.GetKPPosDescScoreReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetKPPosDescScoreReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetKPPosDescScoreReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KP2D.GetKPPosDescScoreReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KP2D.GetKPPosDescScoreReply)
    MergeFrom(*source);
  }
}

void GetKPPosDescScoreReply::MergeFrom(const GetKPPosDescScoreReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KP2D.GetKPPosDescScoreReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_kp()->::KP2D::Tensor::MergeFrom(from._internal_kp());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_desc()->::KP2D::Tensor::MergeFrom(from._internal_desc());
    }
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void GetKPPosDescScoreReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KP2D.GetKPPosDescScoreReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetKPPosDescScoreReply::CopyFrom(const GetKPPosDescScoreReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KP2D.GetKPPosDescScoreReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKPPosDescScoreReply::IsInitialized() const {
  return true;
}

void GetKPPosDescScoreReply::InternalSwap(GetKPPosDescScoreReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetKPPosDescScoreReply, status_)
      + sizeof(GetKPPosDescScoreReply::status_)
      - PROTOBUF_FIELD_OFFSET(GetKPPosDescScoreReply, kp_)>(
          reinterpret_cast<char*>(&kp_),
          reinterpret_cast<char*>(&other->kp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKPPosDescScoreReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetKPPosDescScoreMapReply::_Internal {
 public:
  using HasBits = decltype(std::declval<GetKPPosDescScoreMapReply>()._has_bits_);
  static const ::KP2D::Tensor& prob(const GetKPPosDescScoreMapReply* msg);
  static void set_has_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KP2D::Tensor& desc(const GetKPPosDescScoreMapReply* msg);
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::KP2D::Tensor&
GetKPPosDescScoreMapReply::_Internal::prob(const GetKPPosDescScoreMapReply* msg) {
  return *msg->prob_;
}
const ::KP2D::Tensor&
GetKPPosDescScoreMapReply::_Internal::desc(const GetKPPosDescScoreMapReply* msg) {
  return *msg->desc_;
}
GetKPPosDescScoreMapReply::GetKPPosDescScoreMapReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KP2D.GetKPPosDescScoreMapReply)
}
GetKPPosDescScoreMapReply::GetKPPosDescScoreMapReply(const GetKPPosDescScoreMapReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prob()) {
    prob_ = new ::KP2D::Tensor(*from.prob_);
  } else {
    prob_ = nullptr;
  }
  if (from._internal_has_desc()) {
    desc_ = new ::KP2D::Tensor(*from.desc_);
  } else {
    desc_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:KP2D.GetKPPosDescScoreMapReply)
}

void GetKPPosDescScoreMapReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prob_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&prob_)) + sizeof(status_));
}

GetKPPosDescScoreMapReply::~GetKPPosDescScoreMapReply() {
  // @@protoc_insertion_point(destructor:KP2D.GetKPPosDescScoreMapReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetKPPosDescScoreMapReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prob_;
  if (this != internal_default_instance()) delete desc_;
}

void GetKPPosDescScoreMapReply::ArenaDtor(void* object) {
  GetKPPosDescScoreMapReply* _this = reinterpret_cast< GetKPPosDescScoreMapReply* >(object);
  (void)_this;
}
void GetKPPosDescScoreMapReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetKPPosDescScoreMapReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetKPPosDescScoreMapReply::Clear() {
// @@protoc_insertion_point(message_clear_start:KP2D.GetKPPosDescScoreMapReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      if (GetArena() == nullptr && prob_ != nullptr) {
        delete prob_;
      }
      prob_ = nullptr;
    }
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && desc_ != nullptr) {
        delete desc_;
      }
      desc_ = nullptr;
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetKPPosDescScoreMapReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .KP2D.Tensor prob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prob(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KP2D.Tensor desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_desc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetKPPosDescScoreMapReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KP2D.GetKPPosDescScoreMapReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KP2D.Tensor prob = 1;
  if (_internal_has_prob()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prob(this), target, stream);
  }

  // .KP2D.Tensor desc = 2;
  if (_internal_has_desc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::desc(this), target, stream);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KP2D.GetKPPosDescScoreMapReply)
  return target;
}

size_t GetKPPosDescScoreMapReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KP2D.GetKPPosDescScoreMapReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .KP2D.Tensor prob = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prob_);
    }

    // .KP2D.Tensor desc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *desc_);
    }

  }
  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetKPPosDescScoreMapReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KP2D.GetKPPosDescScoreMapReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetKPPosDescScoreMapReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetKPPosDescScoreMapReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KP2D.GetKPPosDescScoreMapReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KP2D.GetKPPosDescScoreMapReply)
    MergeFrom(*source);
  }
}

void GetKPPosDescScoreMapReply::MergeFrom(const GetKPPosDescScoreMapReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KP2D.GetKPPosDescScoreMapReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_prob()->::KP2D::Tensor::MergeFrom(from._internal_prob());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_desc()->::KP2D::Tensor::MergeFrom(from._internal_desc());
    }
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void GetKPPosDescScoreMapReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KP2D.GetKPPosDescScoreMapReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetKPPosDescScoreMapReply::CopyFrom(const GetKPPosDescScoreMapReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KP2D.GetKPPosDescScoreMapReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKPPosDescScoreMapReply::IsInitialized() const {
  return true;
}

void GetKPPosDescScoreMapReply::InternalSwap(GetKPPosDescScoreMapReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetKPPosDescScoreMapReply, status_)
      + sizeof(GetKPPosDescScoreMapReply::status_)
      - PROTOBUF_FIELD_OFFSET(GetKPPosDescScoreMapReply, prob_)>(
          reinterpret_cast<char*>(&prob_),
          reinterpret_cast<char*>(&other->prob_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKPPosDescScoreMapReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KP2D
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KP2D::Image* Arena::CreateMaybeMessage< ::KP2D::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KP2D::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::KP2D::ImgAndThr* Arena::CreateMaybeMessage< ::KP2D::ImgAndThr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KP2D::ImgAndThr >(arena);
}
template<> PROTOBUF_NOINLINE ::KP2D::ImagePair* Arena::CreateMaybeMessage< ::KP2D::ImagePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KP2D::ImagePair >(arena);
}
template<> PROTOBUF_NOINLINE ::KP2D::Tensor* Arena::CreateMaybeMessage< ::KP2D::Tensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KP2D::Tensor >(arena);
}
template<> PROTOBUF_NOINLINE ::KP2D::AlignReply* Arena::CreateMaybeMessage< ::KP2D::AlignReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KP2D::AlignReply >(arena);
}
template<> PROTOBUF_NOINLINE ::KP2D::GetEssentialMatrixReply* Arena::CreateMaybeMessage< ::KP2D::GetEssentialMatrixReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KP2D::GetEssentialMatrixReply >(arena);
}
template<> PROTOBUF_NOINLINE ::KP2D::GetKPPosDescScoreReply* Arena::CreateMaybeMessage< ::KP2D::GetKPPosDescScoreReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KP2D::GetKPPosDescScoreReply >(arena);
}
template<> PROTOBUF_NOINLINE ::KP2D::GetKPPosDescScoreMapReply* Arena::CreateMaybeMessage< ::KP2D::GetKPPosDescScoreMapReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KP2D::GetKPPosDescScoreMapReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
